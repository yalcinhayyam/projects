=== java/com/example/library/MainActivity.java === package com.example.library; import android.content.Intent; import android.os.Bundle; import android.util.Log; import android.view.View; import androidx.appcompat.app.AppCompatActivity; import androidx.recyclerview.widget.LinearLayoutManager; import androidx.recyclerview.widget.RecyclerView; import com.example.library.util.ToastHelper; import com.example.library.view.AddBookActivity; import com.example.library.view.BookDetailActivity; import com.example.library.view.EditBookActivity; import com.example.library.view.UserManagementActivity; import com.google.android.material.floatingactionbutton.FloatingActionButton; import com.example.library.view.adapter.BookAdapter; import com.example.library.data.DatabaseHelper; import com.example.library.model.Book; import java.util.List; public class MainActivity extends AppCompatActivity implements BookAdapter.OnBookClickListener { private RecyclerView recyclerView; private BookAdapter bookAdapter; private DatabaseHelper databaseHelper; private FloatingActionButton fabAddBook; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initDatabase(); initViews(); setupRecyclerView(); } @Override protected void onStart() { super.onStart(); loadBooks(); } private void initDatabase() { try { databaseHelper = DatabaseHelper.getInstance(this); // Use singleton pattern } catch (Exception e) { ToastHelper.showError(this,"Database initialization failed"); Log.e("MainActivity", "Database init error", e); finish(); } } private void initViews() { recyclerView = findViewById(R.id.recyclerViewBooks); fabAddBook = findViewById(R.id.fabAddBook); fabAddBook.setOnClickListener(v -> { startActivity(new Intent(MainActivity.this, AddBookActivity.class)); }); } private void setupRecyclerView() { bookAdapter = new BookAdapter(this); recyclerView.setLayoutManager(new LinearLayoutManager(this)); recyclerView.setAdapter(bookAdapter); recyclerView.setHasFixedSize(true); // Improves performance if item size is fixed } private void loadBooks() { if (databaseHelper == null) return; try { List<Book> books = databaseHelper.getAllBooks(); if (books != null && !books.isEmpty()) { bookAdapter.setBooks(books); } else { ToastHelper.showInfo(this,"No books available"); } } catch (Exception e) { ToastHelper.showError(this,"Failed to load books"); } } @Override public void onBookClick(Book book) { if (book == null) return; Intent intent = new Intent(this, BookDetailActivity.class); intent.putExtra("book_id", book.id); intent.putExtra("book_title", book.title); intent.putExtra("book_pages", book.pageCount); startActivity(intent); } @Override public void onBookLongClick(Book book) { if (book == null) return; Intent intent = new Intent(this, EditBookActivity.class); intent.putExtra("book_id", book.id); intent.putExtra("book_title", book.title); intent.putExtra("book_pages", book.pageCount); startActivity(intent); } public void openUserManagement(View view) { startActivity(new Intent(this, UserManagementActivity.class)); } @Override protected void onDestroy() { if (databaseHelper != null) { databaseHelper.close(); } super.onDestroy(); } } === java/com/example/library/util/ToastHelper.java === package com.example.library.util; import android.content.Context; import android.widget.Toast; public class ToastHelper { public static void showSuccess(Context context, String message) { Toast.makeText(context, message, Toast.LENGTH_SHORT).show(); } public static void showError(Context context, String message) { Toast.makeText(context, message, Toast.LENGTH_SHORT).show(); } public static void showInfo(Context context, String message) { Toast.makeText(context, message, Toast.LENGTH_SHORT).show(); } } === java/com/example/library/model/User.java === package com.example.library.model; public class User { public int id; public String name; public String studentNumber; public boolean isBanned; public User(int id, String name, String studentNumber, boolean isBanned) { this.id = id; this.name = name; this.studentNumber = studentNumber; this.isBanned = isBanned; } } === java/com/example/library/model/Book.java === package com.example.library.model; public class Book { public int id; public String title; public int pageCount; public Book(int id, String title, int pageCount) { this.id = id; this.title = title; this.pageCount = pageCount; } } === java/com/example/library/model/Entity.java === package com.example.library.model; public class Entity { public int id; public int bookId; public int userId; public String issueDate; public String dueDate; public boolean isReturned; public Entity(int id, int bookId, int userId, String issueDate, String dueDate, boolean isReturned) { this.id = id; this.bookId = bookId; this.userId = userId; this.issueDate = issueDate; this.dueDate = dueDate; this.isReturned = isReturned; } } === java/com/example/library/view/AddBookActivity.java === package com.example.library.view; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.Toast; import androidx.appcompat.app.AppCompatActivity; import com.example.library.R; import com.example.library.data.DatabaseHelper; import com.example.library.model.Book; public class AddBookActivity extends AppCompatActivity { private EditText etBookTitle, etBookPages; private Button btnSave, btnCancel; private DatabaseHelper databaseHelper; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_add_book); initViews(); setupClickListeners(); } private void initViews() { etBookTitle = findViewById(R.id.etBookTitle); etBookPages = findViewById(R.id.etBookPages); btnSave = findViewById(R.id.btnSave); btnCancel = findViewById(R.id.btnCancel); databaseHelper = new DatabaseHelper(this); // Geri butonu if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setTitle("Yeni Kitap Ekle"); } } private void setupClickListeners() { btnSave.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { saveBook(); } }); btnCancel.setOnClickListener(v -> finish()); } private void saveBook() { String title = etBookTitle.getText().toString().trim(); String pagesStr = etBookPages.getText().toString().trim(); if (title.isEmpty()) { etBookTitle.setError("Kitap adı boş olamaz"); return; } if (pagesStr.isEmpty()) { etBookPages.setError("Sayfa sayısı boş olamaz"); return; } try { int pages = Integer.parseInt(pagesStr); if (pages <= 0) { etBookPages.setError("Sayfa sayısı pozitif olmalı"); return; } Book newBook = new Book(0, title, pages); long result = databaseHelper.addBook(newBook); if (result != -1) { Toast.makeText(this, "Kitap başarıyla eklendi!", Toast.LENGTH_SHORT).show(); finish(); } else { Toast.makeText(this, "Kitap eklenirken hata oluştu!", Toast.LENGTH_SHORT).show(); } } catch (NumberFormatException e) { etBookPages.setError("Geçerli bir sayı girin"); } } @Override public boolean onSupportNavigateUp() { onBackPressed(); return true; } } === java/com/example/library/view/BookDetailActivity.java === package com.example.library.view; import android.app.DatePickerDialog; import android.content.DialogInterface; import android.os.Bundle; import android.view.View; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.DatePicker; import android.widget.Spinner; import android.widget.TextView; import android.widget.Toast; import androidx.appcompat.app.AlertDialog; import androidx.appcompat.app.AppCompatActivity; import com.example.library.R; import com.example.library.data.DatabaseHelper; import com.example.library.model.Book; import com.example.library.model.User; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.List; import java.util.Locale; public class BookDetailActivity extends AppCompatActivity { private TextView tvTitle, tvPages, tvStatus, tvBorrower; private Button btnBorrow, btnReturn, btnDelete, btnManageUsers; private DatabaseHelper databaseHelper; private Book currentBook; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_book_detail); initViews(); loadBookData(); updateBookStatus(); } private void initViews() { tvTitle = findViewById(R.id.tvDetailTitle); tvPages = findViewById(R.id.tvDetailPages); tvStatus = findViewById(R.id.tvDetailStatus); tvBorrower = findViewById(R.id.tvDetailBorrower); btnBorrow = findViewById(R.id.btnBorrow); btnReturn = findViewById(R.id.btnReturn); btnDelete = findViewById(R.id.btnDelete); btnManageUsers = findViewById(R.id.btnManageUsers); databaseHelper = new DatabaseHelper(this); btnBorrow.setOnClickListener(v -> showBorrowDialog()); btnReturn.setOnClickListener(v -> returnBook()); btnDelete.setOnClickListener(v -> showDeleteConfirmation()); btnManageUsers.setOnClickListener(v -> showUserManagement()); if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); } } private void loadBookData() { int bookId = getIntent().getIntExtra("book_id", -1); String bookTitle = getIntent().getStringExtra("book_title"); int bookPages = getIntent().getIntExtra("book_pages", 0); currentBook = new Book(bookId, bookTitle, bookPages); tvTitle.setText(bookTitle); tvPages.setText(bookPages + " sayfa"); } private void updateBookStatus() { if (databaseHelper.isBookBorrowed(currentBook.id)) { tvStatus.setText("Durum: Ödünç Verildi"); tvStatus.setTextColor(getColor(android.R.color.holo_red_dark)); User borrower = databaseHelper.getBookBorrower(currentBook.id); if (borrower != null) { String borrowerInfo = borrower.name; if (borrower.isBanned) { borrowerInfo += " (Yasaklı)"; } tvBorrower.setText("Ödünç alan: " + borrowerInfo); tvBorrower.setVisibility(View.VISIBLE); } btnBorrow.setVisibility(View.GONE); btnReturn.setVisibility(View.VISIBLE); } else { tvStatus.setText("Durum: Mevcut"); tvStatus.setTextColor(getColor(android.R.color.holo_green_dark)); tvBorrower.setVisibility(View.GONE); btnBorrow.setVisibility(View.VISIBLE); btnReturn.setVisibility(View.GONE); } } private void showBorrowDialog() { List<User> users = databaseHelper.getAllUsers(); if (users.isEmpty()) { Toast.makeText(this, "Önce kullanıcı eklemelisiniz!", Toast.LENGTH_SHORT).show(); return; } // Filter out banned users users.removeIf(user -> user.isBanned); if (users.isEmpty()) { Toast.makeText(this, "Ödünç verebileceğiniz aktif kullanıcı yok!", Toast.LENGTH_SHORT).show(); return; } String[] userNames = new String[users.size()]; for (int i = 0; i < users.size(); i++) { userNames[i] = users.get(i).name; if (users.get(i).studentNumber != null && !users.get(i).studentNumber.isEmpty()) { userNames[i] += " (" + users.get(i).studentNumber + ")"; } } AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setTitle("Kullanıcı Seçin"); final int[] selectedUser = {0}; builder.setSingleChoiceItems(userNames, 0, (dialog, which) -> { selectedUser[0] = which; }); builder.setPositiveButton("Devam", (dialog, which) -> { User user = users.get(selectedUser[0]); showDatePickerForBorrow(user); }); builder.setNegativeButton("İptal", null); builder.show(); } private void showDatePickerForBorrow(User user) { Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.DAY_OF_MONTH, 14); // 2 hafta sonra DatePickerDialog datePickerDialog = new DatePickerDialog( this, (view, year, month, dayOfMonth) -> { Calendar selectedDate = Calendar.getInstance(); selectedDate.set(year, month, dayOfMonth); SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()); String dueDate = sdf.format(selectedDate.getTime()); borrowBook(user.id, dueDate); }, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH) ); datePickerDialog.setTitle("Teslim Tarihi Seçin"); datePickerDialog.show(); } private void borrowBook(int userId, String dueDate) { boolean success = databaseHelper.borrowBook(currentBook.id, userId, dueDate); if (success) { Toast.makeText(this, "Kitap ödünç verildi!", Toast.LENGTH_SHORT).show(); updateBookStatus(); } else { Toast.makeText(this, "Hata oluştu!", Toast.LENGTH_SHORT).show(); } } private void returnBook() { boolean success = databaseHelper.returnBook(currentBook.id); if (success) { Toast.makeText(this, "Kitap iade edildi!", Toast.LENGTH_SHORT).show(); updateBookStatus(); } else { Toast.makeText(this, "Hata oluştu!", Toast.LENGTH_SHORT).show(); } } private void showDeleteConfirmation() { new AlertDialog.Builder(this) .setTitle("Kitabı Sil") .setMessage("Bu kitabı silmek istediğinizden emin misiniz?") .setPositiveButton("Sil", (dialog, which) -> { databaseHelper.deleteBook(currentBook); Toast.makeText(this, "Kitap silindi!", Toast.LENGTH_SHORT).show(); finish(); }) .setNegativeButton("İptal", null) .show(); } private void showUserManagement() { View dialogView = getLayoutInflater().inflate(R.layout.dialog_add_user, null); TextView etUserName = dialogView.findViewById(R.id.etName); TextView etStudentNumber = dialogView.findViewById(R.id.etStudentNumber); new AlertDialog.Builder(this) .setTitle("Yeni Kullanıcı Ekle") .setView(dialogView) .setPositiveButton("Ekle", (dialog, which) -> { String userName = etUserName.getText().toString().trim(); String studentNumber = etStudentNumber.getText().toString().trim(); if (!userName.isEmpty()) { User newUser = new User(0, userName, studentNumber, false); long result = databaseHelper.addUser(newUser); if (result != -1) { Toast.makeText(this, "Kullanıcı eklendi!", Toast.LENGTH_SHORT).show(); } else { Toast.makeText(this, "Bu öğrenci numarası zaten kayıtlı!", Toast.LENGTH_SHORT).show(); } } else { Toast.makeText(this, "Kullanıcı adı boş olamaz!", Toast.LENGTH_SHORT).show(); } }) .setNegativeButton("İptal", null) .show(); } @Override public boolean onSupportNavigateUp() { onBackPressed(); return true; } } === java/com/example/library/view/EditBookActivity.java === package com.example.library.view; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.Toast; import androidx.appcompat.app.AppCompatActivity; import com.example.library.R; import com.example.library.data.DatabaseHelper; import com.example.library.model.Book; public class EditBookActivity extends AppCompatActivity { private EditText etBookTitle, etBookPages; private Button btnUpdate, btnCancel; private DatabaseHelper databaseHelper; private Book currentBook; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_edit_book); initViews(); loadBookData(); setupClickListeners(); } private void initViews() { etBookTitle = findViewById(R.id.etBookTitle); etBookPages = findViewById(R.id.etBookPages); btnUpdate = findViewById(R.id.btnUpdate); btnCancel = findViewById(R.id.btnCancel); databaseHelper = new DatabaseHelper(this); // Geri butonu if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setTitle("Kitap Düzenle"); } } private void loadBookData() { int bookId = getIntent().getIntExtra("book_id", -1); String bookTitle = getIntent().getStringExtra("book_title"); int bookPages = getIntent().getIntExtra("book_pages", 0); currentBook = new Book(bookId, bookTitle, bookPages); etBookTitle.setText(bookTitle); etBookPages.setText(String.valueOf(bookPages)); } private void setupClickListeners() { btnUpdate.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { updateBook(); } }); btnCancel.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { finish(); } }); } private void updateBook() { String title = etBookTitle.getText().toString().trim(); String pagesStr = etBookPages.getText().toString().trim(); if (title.isEmpty()) { etBookTitle.setError("Kitap adı boş olamaz"); return; } if (pagesStr.isEmpty()) { etBookPages.setError("Sayfa sayısı boş olamaz"); return; } try { int pages = Integer.parseInt(pagesStr); if (pages <= 0) { etBookPages.setError("Sayfa sayısı pozitif olmalı"); return; } currentBook.title = title; currentBook.pageCount = pages; int result = databaseHelper.updateBook(currentBook); if (result > 0) { Toast.makeText(this, "Kitap başarıyla güncellendi!", Toast.LENGTH_SHORT).show(); finish(); } else { Toast.makeText(this, "Kitap güncellenirken hata oluştu!", Toast.LENGTH_SHORT).show(); } } catch (NumberFormatException e) { etBookPages.setError("Geçerli bir sayı girin"); } } @Override public boolean onSupportNavigateUp() { onBackPressed(); return true; } } === java/com/example/library/view/UserManagementActivity.java === package com.example.library.view; import android.app.AlertDialog; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.Toast; import androidx.appcompat.app.AppCompatActivity; import androidx.recyclerview.widget.LinearLayoutManager; import androidx.recyclerview.widget.RecyclerView; import com.example.library.R; import com.example.library.data.DatabaseHelper; import com.example.library.model.User; import com.example.library.view.adapter.UserAdapter; import com.google.android.material.floatingactionbutton.FloatingActionButton; import java.util.List; public class UserManagementActivity extends AppCompatActivity implements UserAdapter.OnUserClickListener { private RecyclerView recyclerView; private UserAdapter userAdapter; private DatabaseHelper databaseHelper; private FloatingActionButton fabAddUser; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_user_management); initViews(); setupRecyclerView(); loadUsers(); } private void initViews() { recyclerView = findViewById(R.id.recyclerViewUsers); fabAddUser = findViewById(R.id.fabAddUser); databaseHelper = new DatabaseHelper(this); fabAddUser.setOnClickListener(v -> { showAddUserDialog(); }); } private void setupRecyclerView() { userAdapter = new UserAdapter(this); recyclerView.setLayoutManager(new LinearLayoutManager(this)); recyclerView.setAdapter(userAdapter); } private void loadUsers() { List<User> users = databaseHelper.getAllUsers(); userAdapter.setUsers(users); } private void showAddUserDialog() { AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this); LayoutInflater inflater = this.getLayoutInflater(); View dialogView = inflater.inflate(R.layout.dialog_add_user, null); dialogBuilder.setView(dialogView); EditText etStudentNumber = dialogView.findViewById(R.id.etStudentNumber); EditText etName = dialogView.findViewById(R.id.etName); Button btnAdd = dialogView.findViewById(R.id.btnAdd); Button btnCancel = dialogView.findViewById(R.id.btnCancel); AlertDialog alertDialog = dialogBuilder.create(); alertDialog.show(); btnAdd.setOnClickListener(v -> { String studentNumber = etStudentNumber.getText().toString().trim(); String name = etName.getText().toString().trim(); if (studentNumber.isEmpty() || name.isEmpty()) { Toast.makeText(this, "Tüm alanları doldurun", Toast.LENGTH_SHORT).show(); return; } User newUser = new User(0,name, studentNumber, false); long result = databaseHelper.addUser(newUser); if (result != -1) { loadUsers(); Toast.makeText(this, "Kullanıcı eklendi", Toast.LENGTH_SHORT).show(); alertDialog.dismiss(); } else { Toast.makeText(this, "Ekleme başarısız", Toast.LENGTH_SHORT).show(); } }); btnCancel.setOnClickListener(v -> alertDialog.dismiss()); } @Override public void onUserClick(User user) { showEditUserDialog(user); } @Override public void onUserBanClick(User user) { boolean newBanStatus = !user.isBanned; boolean success = databaseHelper.toggleUserBan(user.id, newBanStatus); if (success) { user.isBanned = newBanStatus; userAdapter.notifyDataSetChanged(); Toast.makeText(this, newBanStatus ? "Kullanıcı yasaklandı" : "Yasak kaldırıldı", Toast.LENGTH_SHORT).show(); } else { Toast.makeText(this, "İşlem başarısız", Toast.LENGTH_SHORT).show(); } } @Override public void onUserDeleteClick(User user) { int result = databaseHelper.deleteUser(user); if (result > 0) { loadUsers(); Toast.makeText(this, "Kullanıcı silindi", Toast.LENGTH_SHORT).show(); } else { Toast.makeText(this, "Silme işlemi başarısız", Toast.LENGTH_SHORT).show(); } } private void showEditUserDialog(User user) { AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this); LayoutInflater inflater = this.getLayoutInflater(); View dialogView = inflater.inflate(R.layout.dialog_edit_user, null); dialogBuilder.setView(dialogView); EditText etStudentNumber = dialogView.findViewById(R.id.etStudentNumber); EditText etName = dialogView.findViewById(R.id.etName); Button btnUpdate = dialogView.findViewById(R.id.btnUpdate); Button btnCancel = dialogView.findViewById(R.id.btnCancel); etStudentNumber.setText(user.studentNumber); etName.setText(user.name); AlertDialog alertDialog = dialogBuilder.create(); alertDialog.show(); btnUpdate.setOnClickListener(v -> { String studentNumber = etStudentNumber.getText().toString().trim(); String name = etName.getText().toString().trim(); if (studentNumber.isEmpty() || name.isEmpty()) { Toast.makeText(this, "Tüm alanları doldurun", Toast.LENGTH_SHORT).show(); return; } user.studentNumber = studentNumber; user.name = name; int result = databaseHelper.updateUser(user); if (result > 0) { loadUsers(); Toast.makeText(this, "Kullanıcı güncellendi", Toast.LENGTH_SHORT).show(); alertDialog.dismiss(); } else { Toast.makeText(this, "Güncelleme başarısız", Toast.LENGTH_SHORT).show(); } }); btnCancel.setOnClickListener(v -> alertDialog.dismiss()); } @Override protected void onResume() { super.onResume(); loadUsers(); } } === java/com/example/library/view/adapter/UserAdapter.java === package com.example.library.view.adapter; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageButton; import android.widget.TextView; import androidx.annotation.NonNull; import androidx.core.content.ContextCompat; import androidx.recyclerview.widget.RecyclerView; import com.example.library.R; import com.example.library.model.User; import java.util.ArrayList; import java.util.List; public class UserAdapter extends RecyclerView.Adapter<UserAdapter.UserViewHolder> { private List<User> users; private final OnUserClickListener listener; private View emptyView; public interface OnUserClickListener { void onUserClick(User user); void onUserBanClick(User user); void onUserDeleteClick(User user); } public UserAdapter(OnUserClickListener listener) { this.listener = listener; this.users = new ArrayList<>(); } public void setUsers(List<User> users) { this.users = users != null ? users : new ArrayList<>(); notifyDataSetChanged(); updateEmptyView(); } public void setEmptyView(View emptyView) { this.emptyView = emptyView; updateEmptyView(); } private void updateEmptyView() { if (emptyView != null) { emptyView.setVisibility(getItemCount() == 0 ? View.VISIBLE : View.GONE); } } @NonNull @Override public UserViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { View view = LayoutInflater.from(parent.getContext()) .inflate(R.layout.item_user, parent, false); return new UserViewHolder(view); } @Override public void onBindViewHolder(@NonNull UserViewHolder holder, int position) { User user = users.get(position); holder.bind(user, listener); } @Override public int getItemCount() { return users.size(); } static class UserViewHolder extends RecyclerView.ViewHolder { private final TextView tvUserName; private final TextView tvStudentNumber; private final TextView tvBanStatus; private final ImageButton btnBan; private final ImageButton btnDelete; public UserViewHolder(@NonNull View itemView) { super(itemView); tvUserName = itemView.findViewById(R.id.tvUserName); tvStudentNumber = itemView.findViewById(R.id.tvStudentNumber); tvBanStatus = itemView.findViewById(R.id.tvBanStatus); btnBan = itemView.findViewById(R.id.btnBan); btnDelete = itemView.findViewById(R.id.btnDelete); } public void bind(User user, OnUserClickListener listener) { tvUserName.setText(user.name); tvStudentNumber.setText(user.studentNumber); if (user.isBanned) { tvBanStatus.setText("Yasaklı"); tvBanStatus.setTextColor(ContextCompat.getColor(itemView.getContext(), R.color.red)); btnBan.setImageResource(R.drawable.ic_unban); } else { tvBanStatus.setText("Aktif"); tvBanStatus.setTextColor(ContextCompat.getColor(itemView.getContext(), R.color.green)); btnBan.setImageResource(R.drawable.ic_ban); } itemView.setOnClickListener(v -> listener.onUserClick(user)); btnBan.setOnClickListener(v -> listener.onUserBanClick(user)); btnDelete.setOnClickListener(v -> listener.onUserDeleteClick(user)); } } } === java/com/example/library/view/adapter/BookAdapter.java === package com.example.library.view.adapter; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import androidx.annotation.NonNull; import androidx.recyclerview.widget.RecyclerView; import com.example.library.R; import com.example.library.data.DatabaseHelper; import com.example.library.model.Book; import com.example.library.model.User; import java.util.ArrayList; import java.util.List; public class BookAdapter extends RecyclerView.Adapter<BookAdapter.BookViewHolder> { private List<Book> books = new ArrayList<>(); private OnBookClickListener listener; private DatabaseHelper databaseHelper; public interface OnBookClickListener { void onBookClick(Book book); void onBookLongClick(Book book); } public BookAdapter(OnBookClickListener listener) { this.listener = listener; this.databaseHelper = new DatabaseHelper(listener instanceof android.content.Context ? (android.content.Context) listener : null); } @NonNull @Override public BookViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { View view = LayoutInflater.from(parent.getContext()) .inflate(R.layout.item_book, parent, false); return new BookViewHolder(view); } @Override public void onBindViewHolder(@NonNull BookViewHolder holder, int position) { Book book = books.get(position); holder.bind(book); } @Override public int getItemCount() { return books.size(); } public void setBooks(List<Book> books) { this.books = books; notifyDataSetChanged(); } public class BookViewHolder extends RecyclerView.ViewHolder { private TextView tvTitle, tvPages, tvStatus, tvBorrower; public BookViewHolder(@NonNull View itemView) { super(itemView); tvTitle = itemView.findViewById(R.id.tvBookTitle); tvPages = itemView.findViewById(R.id.tvBookPages); tvStatus = itemView.findViewById(R.id.tvBookStatus); tvBorrower = itemView.findViewById(R.id.tvBookBorrower); itemView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { int position = getAdapterPosition(); if (position != RecyclerView.NO_POSITION && listener != null) { listener.onBookClick(books.get(position)); } } }); itemView.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean onLongClick(View v) { int position = getAdapterPosition(); if (position != RecyclerView.NO_POSITION && listener != null) { listener.onBookLongClick(books.get(position)); return true; } return false; } }); } public void bind(Book book) { tvTitle.setText(book.title); tvPages.setText(book.pageCount + " sayfa"); if (databaseHelper != null && databaseHelper.isBookBorrowed(book.id)) { tvStatus.setText("Ödünç Verildi"); tvStatus.setTextColor(itemView.getContext().getColor(android.R.color.holo_red_dark)); User borrower = databaseHelper.getBookBorrower(book.id); if (borrower != null) { tvBorrower.setText("Ödünç alan: " + borrower.name); tvBorrower.setVisibility(View.VISIBLE); } else { tvBorrower.setVisibility(View.GONE); } } else { tvStatus.setText("Mevcut"); tvStatus.setTextColor(itemView.getContext().getColor(android.R.color.holo_green_dark)); tvBorrower.setVisibility(View.GONE); } } } } === java/com/example/library/view/dialog/UserDialog.java === package com.example.library.view.dialog; import android.app.AlertDialog; import android.content.Context; import android.view.LayoutInflater; import android.view.View; import android.widget.EditText; import com.example.library.R; import com.example.library.data.DatabaseHelper; import com.example.library.model.User; import com.example.library.util.ToastHelper; public class UserDialog { public interface OnUserActionListener { void onUserAdded(User user); void onUserUpdated(User user); } public static void showAddUserDialog(Context context, OnUserActionListener listener) { View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_add_user, null); EditText etName = dialogView.findViewById(R.id.etName); EditText etStudentNumber = dialogView.findViewById(R.id.etStudentNumber); new AlertDialog.Builder(context) .setTitle("Yeni Kullanıcı Ekle") .setView(dialogView) .setPositiveButton("Ekle", (dialog, which) -> { String name = etName.getText().toString().trim(); String studentNumber = etStudentNumber.getText().toString().trim(); if (name.isEmpty() || studentNumber.isEmpty()) { ToastHelper.showError(context, "Tüm alanları doldurun"); return; } DatabaseHelper db = new DatabaseHelper(context); User user = new User(0, name, studentNumber, false); long id = db.addUser(user); if (id != -1) { user.id = (int) id; listener.onUserAdded(user); ToastHelper.showSuccess(context, "Kullanıcı eklendi"); } else { ToastHelper.showError(context, "Bu öğrenci numarası zaten kayıtlı"); } }) .setNegativeButton("İptal", null) .show(); } public static void showEditUserDialog(Context context, User user, OnUserActionListener listener) { View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_add_user, null); EditText etName = dialogView.findViewById(R.id.etName); EditText etStudentNumber = dialogView.findViewById(R.id.etStudentNumber); etName.setText(user.name); etStudentNumber.setText(user.studentNumber); etStudentNumber.setEnabled(false); new AlertDialog.Builder(context) .setTitle("Kullanıcı Düzenle") .setView(dialogView) .setPositiveButton("Güncelle", (dialog, which) -> { String name = etName.getText().toString().trim(); if (name.isEmpty()) { ToastHelper.showError(context, "İsim boş olamaz"); return; } DatabaseHelper db = new DatabaseHelper(context); user.name = name; int result = db.updateUser(user); if (result > 0) { listener.onUserUpdated(user); ToastHelper.showSuccess(context, "Kullanıcı güncellendi"); } else { ToastHelper.showError(context, "Güncelleme başarısız"); } }) .setNegativeButton("İptal", null) .show(); } } === java/com/example/library/data/DatabaseHelper.java === // DatabaseHelper.java package com.example.library.data; import android.content.ContentValues; import android.content.Context; import android.database.Cursor; import android.database.sqlite.SQLiteConstraintException; import android.database.sqlite.SQLiteDatabase; import android.database.sqlite.SQLiteOpenHelper; import com.example.library.model.Book; import com.example.library.model.Entity; import com.example.library.model.User; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.List; import java.util.Locale; public class DatabaseHelper extends SQLiteOpenHelper { private static final String DATABASE_NAME = "library.db"; private static final int DATABASE_VERSION = 1; // Tablo isimleri private static final String TABLE_BOOKS = "books"; private static final String TABLE_USERS = "users"; private static final String TABLE_ENTITIES = "entities"; // Ortak sütunlar private static final String COLUMN_ID = "id"; // Books tablosu sütunları private static final String COLUMN_BOOK_TITLE = "title"; private static final String COLUMN_BOOK_PAGE_COUNT = "page_count"; // Users tablosu sütunları private static final String COLUMN_USER_NAME = "name"; // Entities tablosu sütunları private static final String COLUMN_ENTITY_BOOK_ID = "book_id"; private static final String COLUMN_ENTITY_USER_ID = "user_id"; private static final String COLUMN_ENTITY_ISSUE_DATE = "issue_date"; private static final String COLUMN_ENTITY_DUE_DATE = "due_date"; private static final String COLUMN_ENTITY_IS_RETURNED = "is_returned"; public DatabaseHelper(Context context) { super(context, DATABASE_NAME, null, DATABASE_VERSION); } private static DatabaseHelper instance; public static synchronized DatabaseHelper getInstance(Context context) { if (instance == null) { instance = new DatabaseHelper(context.getApplicationContext()); } return instance; } @Override public void onCreate(SQLiteDatabase db) { // Create books table String CREATE_BOOKS_TABLE = "CREATE TABLE " + TABLE_BOOKS + "(" + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," + COLUMN_BOOK_TITLE + " TEXT," + COLUMN_BOOK_PAGE_COUNT + " INTEGER)"; db.execSQL(CREATE_BOOKS_TABLE); // Create users table (which you already have) String CREATE_USERS_TABLE = "CREATE TABLE " + TABLE_USERS + "(" + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," + COLUMN_USER_NAME + " TEXT," + "student_number TEXT UNIQUE," + "is_banned INTEGER DEFAULT 0)"; db.execSQL(CREATE_USERS_TABLE); // Create entities table String CREATE_ENTITIES_TABLE = "CREATE TABLE " + TABLE_ENTITIES + "(" + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," + COLUMN_ENTITY_BOOK_ID + " INTEGER," + COLUMN_ENTITY_USER_ID + " INTEGER," + COLUMN_ENTITY_ISSUE_DATE + " TEXT," + COLUMN_ENTITY_DUE_DATE + " TEXT," + COLUMN_ENTITY_IS_RETURNED + " INTEGER)"; db.execSQL(CREATE_ENTITIES_TABLE); } @Override public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) { db.execSQL("DROP TABLE IF EXISTS " + TABLE_BOOKS); db.execSQL("DROP TABLE IF EXISTS " + TABLE_USERS); db.execSQL("DROP TABLE IF EXISTS " + TABLE_ENTITIES); onCreate(db); } // Book CRUD işlemleri public long addBook(Book book) { SQLiteDatabase db = this.getWritableDatabase(); ContentValues values = new ContentValues(); values.put(COLUMN_BOOK_TITLE, book.title); values.put(COLUMN_BOOK_PAGE_COUNT, book.pageCount); long id = db.insert(TABLE_BOOKS, null, values); db.close(); return id; } public Book getBook(long id) { SQLiteDatabase db = this.getReadableDatabase(); Cursor cursor = db.query(TABLE_BOOKS, new String[]{COLUMN_ID, COLUMN_BOOK_TITLE, COLUMN_BOOK_PAGE_COUNT}, COLUMN_ID + "=?", new String[]{String.valueOf(id)}, null, null, null, null); Book book = null; if (cursor != null && cursor.moveToFirst()) { try { int idIndex = cursor.getColumnIndex(COLUMN_ID); int titleIndex = cursor.getColumnIndex(COLUMN_BOOK_TITLE); int pageCountIndex = cursor.getColumnIndex(COLUMN_BOOK_PAGE_COUNT); if (idIndex >= 0 && titleIndex >= 0 && pageCountIndex >= 0) { book = new Book( cursor.getInt(idIndex), cursor.getString(titleIndex), cursor.getInt(pageCountIndex)); } } finally { cursor.close(); } } return book; } public List<Book> getAllBooks() { List<Book> books = new ArrayList<>(); SQLiteDatabase db = this.getReadableDatabase(); Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_BOOKS, null); if (cursor != null) { try { int idIndex = cursor.getColumnIndex(COLUMN_ID); int titleIndex = cursor.getColumnIndex(COLUMN_BOOK_TITLE); int pageCountIndex = cursor.getColumnIndex(COLUMN_BOOK_PAGE_COUNT); if (cursor.moveToFirst()) { do { // Only create book if all required columns exist if (idIndex >= 0 && titleIndex >= 0 && pageCountIndex >= 0) { Book book = new Book( cursor.getInt(idIndex), cursor.getString(titleIndex), cursor.getInt(pageCountIndex)); books.add(book); } } while (cursor.moveToNext()); } } finally { cursor.close(); } } db.close(); return books; } public int updateBook(Book book) { SQLiteDatabase db = this.getWritableDatabase(); ContentValues values = new ContentValues(); values.put(COLUMN_BOOK_TITLE, book.title); values.put(COLUMN_BOOK_PAGE_COUNT, book.pageCount); return db.update(TABLE_BOOKS, values, COLUMN_ID + " = ?", new String[]{String.valueOf(book.id)}); } public void deleteBook(Book book) { SQLiteDatabase db = this.getWritableDatabase(); db.delete(TABLE_BOOKS, COLUMN_ID + " = ?", new String[]{String.valueOf(book.id)}); db.close(); } public long addUser(User user) { SQLiteDatabase db = this.getWritableDatabase(); ContentValues values = new ContentValues(); values.put(COLUMN_USER_NAME, user.name); values.put("student_number", user.studentNumber); values.put("is_banned", user.isBanned ? 1 : 0); try { long id = db.insertOrThrow(TABLE_USERS, null, values); db.close(); return id; } catch (SQLiteConstraintException e) { db.close(); return -1; // Unique constraint violation (student number already exists) } } public User getUser(long id) { SQLiteDatabase db = this.getReadableDatabase(); Cursor cursor = db.query(TABLE_USERS, new String[]{COLUMN_ID, COLUMN_USER_NAME, "student_number", "is_banned"}, COLUMN_ID + "=?", new String[]{String.valueOf(id)}, null, null, null, null); User user = null; if (cursor != null && cursor.moveToFirst()) { try { int idIndex = cursor.getColumnIndex(COLUMN_ID); int nameIndex = cursor.getColumnIndex(COLUMN_USER_NAME); int studentNumberIndex = cursor.getColumnIndex("student_number"); int isBannedIndex = cursor.getColumnIndex("is_banned"); if (idIndex >= 0 && nameIndex >= 0 && studentNumberIndex >= 0 && isBannedIndex >= 0) { user = new User( cursor.getInt(idIndex), cursor.getString(nameIndex), cursor.getString(studentNumberIndex), cursor.getInt(isBannedIndex) == 1); } } finally { cursor.close(); } } return user; } public List<User> getAllUsers() { List<User> users = new ArrayList<>(); SQLiteDatabase db = this.getReadableDatabase(); Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_USERS, null); if (cursor != null) { try { int idIndex = cursor.getColumnIndex(COLUMN_ID); int nameIndex = cursor.getColumnIndex(COLUMN_USER_NAME); int studentNumberIndex = cursor.getColumnIndex("student_number"); int isBannedIndex = cursor.getColumnIndex("is_banned"); if (cursor.moveToFirst()) { do { // Only create user if all required columns exist if (idIndex >= 0 && nameIndex >= 0 && studentNumberIndex >= 0 && isBannedIndex >= 0) { User user = new User( cursor.getInt(idIndex), cursor.getString(nameIndex), cursor.getString(studentNumberIndex), cursor.getInt(isBannedIndex) == 1); users.add(user); } } while (cursor.moveToNext()); } } finally { cursor.close(); } } db.close(); return users; } public int updateUser(User user) { SQLiteDatabase db = this.getWritableDatabase(); ContentValues values = new ContentValues(); values.put(COLUMN_USER_NAME, user.name); return db.update(TABLE_USERS, values, COLUMN_ID + " = ?", new String[]{String.valueOf(user.id)}); } public int deleteUser(User user) { SQLiteDatabase db = this.getWritableDatabase(); var result = db.delete(TABLE_USERS, COLUMN_ID + " = ?", new String[]{String.valueOf(user.id)}); db.close(); return result; } // Entity CRUD işlemleri public long addEntity(Entity entity) { SQLiteDatabase db = this.getWritableDatabase(); ContentValues values = new ContentValues(); values.put(COLUMN_ENTITY_BOOK_ID, entity.bookId); values.put(COLUMN_ENTITY_USER_ID, entity.userId); values.put(COLUMN_ENTITY_ISSUE_DATE, entity.issueDate); values.put(COLUMN_ENTITY_DUE_DATE, entity.dueDate); values.put(COLUMN_ENTITY_IS_RETURNED, entity.isReturned ? 1 : 0); long id = db.insert(TABLE_ENTITIES, null, values); db.close(); return id; } public Entity getEntity(long id) { SQLiteDatabase db = this.getReadableDatabase(); Cursor cursor = db.query(TABLE_ENTITIES, new String[]{COLUMN_ID, COLUMN_ENTITY_BOOK_ID, COLUMN_ENTITY_USER_ID, COLUMN_ENTITY_ISSUE_DATE, COLUMN_ENTITY_DUE_DATE, COLUMN_ENTITY_IS_RETURNED}, COLUMN_ID + "=?", new String[]{String.valueOf(id)}, null, null, null, null); Entity entity = null; if (cursor != null && cursor.moveToFirst()) { try { int idIndex = cursor.getColumnIndex(COLUMN_ID); int bookIdIndex = cursor.getColumnIndex(COLUMN_ENTITY_BOOK_ID); int userIdIndex = cursor.getColumnIndex(COLUMN_ENTITY_USER_ID); int issueDateIndex = cursor.getColumnIndex(COLUMN_ENTITY_ISSUE_DATE); int dueDateIndex = cursor.getColumnIndex(COLUMN_ENTITY_DUE_DATE); int isReturnedIndex = cursor.getColumnIndex(COLUMN_ENTITY_IS_RETURNED); if (idIndex >= 0 && bookIdIndex >= 0 && userIdIndex >= 0 && issueDateIndex >= 0 && dueDateIndex >= 0 && isReturnedIndex >= 0) { entity = new Entity( cursor.getInt(idIndex), cursor.getInt(bookIdIndex), cursor.getInt(userIdIndex), cursor.getString(issueDateIndex), cursor.getString(dueDateIndex), cursor.getInt(isReturnedIndex) == 1); } } finally { cursor.close(); } } return entity; } public List<Entity> getAllEntities() { List<Entity> entities = new ArrayList<>(); SQLiteDatabase db = this.getReadableDatabase(); Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_ENTITIES, null); if (cursor != null) { try { int idIndex = cursor.getColumnIndex(COLUMN_ID); int bookIdIndex = cursor.getColumnIndex(COLUMN_ENTITY_BOOK_ID); int userIdIndex = cursor.getColumnIndex(COLUMN_ENTITY_USER_ID); int issueDateIndex = cursor.getColumnIndex(COLUMN_ENTITY_ISSUE_DATE); int dueDateIndex = cursor.getColumnIndex(COLUMN_ENTITY_DUE_DATE); int isReturnedIndex = cursor.getColumnIndex(COLUMN_ENTITY_IS_RETURNED); if (cursor.moveToFirst()) { do { // Only create entity if all required columns exist if (idIndex >= 0 && bookIdIndex >= 0 && userIdIndex >= 0 && issueDateIndex >= 0 && dueDateIndex >= 0 && isReturnedIndex >= 0) { Entity entity = new Entity( cursor.getInt(idIndex), cursor.getInt(bookIdIndex), cursor.getInt(userIdIndex), cursor.getString(issueDateIndex), cursor.getString(dueDateIndex), cursor.getInt(isReturnedIndex) == 1); entities.add(entity); } } while (cursor.moveToNext()); } } finally { cursor.close(); } } db.close(); return entities; } public int updateEntity(Entity entity) { SQLiteDatabase db = this.getWritableDatabase(); ContentValues values = new ContentValues(); values.put(COLUMN_ENTITY_BOOK_ID, entity.bookId); values.put(COLUMN_ENTITY_USER_ID, entity.userId); values.put(COLUMN_ENTITY_ISSUE_DATE, entity.issueDate); values.put(COLUMN_ENTITY_DUE_DATE, entity.dueDate); values.put(COLUMN_ENTITY_IS_RETURNED, entity.isReturned ? 1 : 0); return db.update(TABLE_ENTITIES, values, COLUMN_ID + " = ?", new String[]{String.valueOf(entity.id)}); } public void deleteEntity(Entity entity) { SQLiteDatabase db = this.getWritableDatabase(); db.delete(TABLE_ENTITIES, COLUMN_ID + " = ?", new String[]{String.valueOf(entity.id)}); db.close(); } /** * Kitabı ödünç verme işlemi * @param bookId Ödünç verilecek kitap ID * @param userId Kitabı alan kullanıcı ID * @param dueDate Teslim tarihi (yyyy-MM-dd formatında) * @return işlem başarılıysa true */ public boolean borrowBook(int bookId, int userId, String dueDate) { SQLiteDatabase db = this.getWritableDatabase(); // Entity tablosuna yeni kayıt ekle ContentValues values = new ContentValues(); values.put("book_id", bookId); values.put("user_id", userId); values.put("issue_date", new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date())); values.put("due_date", dueDate); values.put("is_returned", 0); // 0 = ödünç verildi long result = db.insert("entities", null, values); return result != -1; } /** * Kitap iade işlemi * @param bookId İade edilecek kitap ID * @return işlem başarılıysa true */ public boolean returnBook(int bookId) { SQLiteDatabase db = this.getWritableDatabase(); // En son ödünç alma kaydını bul ve iade olarak işaretle ContentValues values = new ContentValues(); values.put("is_returned", 1); // 1 = iade edildi values.put("return_date", new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date())); // Sadece iade edilmemiş en son kaydı güncelle int result = db.update("entities", values, "book_id = ? AND is_returned = 0", new String[]{String.valueOf(bookId)}); return result > 0; } /** * Kitabın şu anda ödünç verilmiş olup olmadığını kontrol eder * @param bookId Kontrol edilecek kitap ID * @return kitap ödünç verilmişse true */ public boolean isBookBorrowed(int bookId) { SQLiteDatabase db = this.getReadableDatabase(); String query = "SELECT COUNT(*) FROM entities WHERE book_id = ? AND is_returned = 0"; Cursor cursor = db.rawQuery(query, new String[]{String.valueOf(bookId)}); boolean isBorrowed = false; if (cursor.moveToFirst()) { isBorrowed = cursor.getInt(0) > 0; } cursor.close(); return isBorrowed; } /** * Kitabı ödünç alan kullanıcıyı getirir * @param bookId Kitap ID * @return User nesnesi veya null */ public User getBookBorrower(int bookId) { SQLiteDatabase db = this.getReadableDatabase(); String query = "SELECT u.* FROM users u " + "JOIN entities e ON u.id = e.user_id " + "WHERE e.book_id = ? AND e.is_returned = 0 " + "LIMIT 1"; Cursor cursor = db.rawQuery(query, new String[]{String.valueOf(bookId)}); User user = null; if (cursor != null && cursor.moveToFirst()) { try { int idIndex = cursor.getColumnIndex(COLUMN_ID); int nameIndex = cursor.getColumnIndex(COLUMN_USER_NAME); int studentNumberIndex = cursor.getColumnIndex("student_number"); int isBannedIndex = cursor.getColumnIndex("is_banned"); if (idIndex >= 0 && nameIndex >= 0 && studentNumberIndex >= 0 && isBannedIndex >= 0) { user = new User( cursor.getInt(idIndex), cursor.getString(nameIndex), cursor.getString(studentNumberIndex), cursor.getInt(isBannedIndex) == 1); } } finally { cursor.close(); } } return user; } public User getUserByStudentNumber(String studentNumber) { SQLiteDatabase db = this.getReadableDatabase(); Cursor cursor = db.query(TABLE_USERS, new String[]{COLUMN_ID, COLUMN_USER_NAME, "student_number", "is_banned"}, "student_number=?", new String[]{studentNumber}, null, null, null); User user = null; if (cursor != null && cursor.moveToFirst()) { try { int idIndex = cursor.getColumnIndex(COLUMN_ID); int nameIndex = cursor.getColumnIndex(COLUMN_USER_NAME); int studentNumberIndex = cursor.getColumnIndex("student_number"); int isBannedIndex = cursor.getColumnIndex("is_banned"); if (idIndex >= 0 && nameIndex >= 0 && studentNumberIndex >= 0 && isBannedIndex >= 0) { user = new User( cursor.getInt(idIndex), cursor.getString(nameIndex), cursor.getString(studentNumberIndex), cursor.getInt(isBannedIndex) == 1); } } finally { cursor.close(); } } return user; } public boolean toggleUserBan(int userId, boolean ban) { SQLiteDatabase db = this.getWritableDatabase(); ContentValues values = new ContentValues(); values.put("is_banned", ban ? 1 : 0); int result = db.update(TABLE_USERS, values, COLUMN_ID + "=?", new String[]{String.valueOf(userId)}); db.close(); return result > 0; } }